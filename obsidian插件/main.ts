import { App, Editor, MarkdownView, Modal, Notice, Plugin, PluginSettingTab, Setting } from 'obsidian';
import { marked } from 'marked';
import html2canvas from 'html2canvas';
import hljs from 'highlight.js';
import './styles.css';

interface MarkdownImageGeneratorSettings {
	width: number;
	emoji: string;
	watermark: string;
}

const DEFAULT_SETTINGS: MarkdownImageGeneratorSettings = {
	width: 800,
	emoji: '✨',
	watermark: 'Generated by Markdown Image Generator'
}

export default class MarkdownImageGenerator extends Plugin {
	settings: MarkdownImageGeneratorSettings;

	async onload() {
		await this.loadSettings();

		// 配置 marked
		marked.setOptions({
			highlight: function(code, lang) {
				if (lang && hljs.getLanguage(lang)) {
					return hljs.highlight(code, { language: lang }).value;
				}
				return hljs.highlightAuto(code).value;
			}
		});

		// 添加命令
		this.addCommand({
			id: 'generate-markdown-image',
			name: '生成 Markdown 图片',
			editorCallback: (editor: Editor, view: MarkdownView) => {
				new ImageGeneratorModal(this.app, this, editor).open();
			}
		});

		// 添加设置标签页
		this.addSettingTab(new MarkdownImageGeneratorSettingTab(this.app, this));
	}

	onunload() {
		console.log('插件已卸载');
	}

	async loadSettings() {
		this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
	}

	async saveSettings() {
		await this.saveData(this.settings);
	}
}

class ImageGeneratorModal extends Modal {
	plugin: MarkdownImageGenerator;
	editor: Editor;

	constructor(app: App, plugin: MarkdownImageGenerator, editor: Editor) {
		super(app);
		this.plugin = plugin;
		this.editor = editor;
	}

	onOpen() {
		const {contentEl} = this;
		contentEl.empty();

		// 创建预览容器
		const previewContainer = contentEl.createDiv('markdown-image-preview');
		previewContainer.style.width = `${this.plugin.settings.width}px`;

		// 添加表情符号
		const emojiEl = previewContainer.createDiv('emoji');
		emojiEl.setText(this.plugin.settings.emoji);

		// 渲染 Markdown
		const markdownContent = this.editor.getSelection() || this.editor.getValue();
		const htmlContent = marked(markdownContent);
		const contentDiv = previewContainer.createDiv('content');
		contentDiv.innerHTML = htmlContent;

		// 添加水印
		const watermarkEl = previewContainer.createDiv('watermark');
		watermarkEl.setText(this.plugin.settings.watermark);

		// 添加生成按钮
		const buttonContainer = contentEl.createDiv('button-container');
		const generateButton = buttonContainer.createEl('button', { text: '生成图片' });
		generateButton.addEventListener('click', async () => {
			try {
				const canvas = await html2canvas(previewContainer);
				const image = canvas.toDataURL('image/png');
				
				// 创建下载链接
				const link = document.createElement('a');
				link.download = 'markdown-image.png';
				link.href = image;
				link.click();

				new Notice('图片已生成！');
			} catch (error) {
				new Notice('生成图片时出错：' + error.message);
			}
		});
	}

	onClose() {
		const {contentEl} = this;
		contentEl.empty();
	}
}

class MarkdownImageGeneratorSettingTab extends PluginSettingTab {
	plugin: MarkdownImageGenerator;

	constructor(app: App, plugin: MarkdownImageGenerator) {
		super(app, plugin);
		this.plugin = plugin;
	}

	display(): void {
		const {containerEl} = this;
		containerEl.empty();

		containerEl.createEl('h2', {text: 'Markdown 图片生成器设置'});

		new Setting(containerEl)
			.setName('图片宽度')
			.setDesc('设置生成图片的宽度（像素）')
			.addText(text => text
				.setPlaceholder('输入宽度')
				.setValue(this.plugin.settings.width.toString())
				.onChange(async (value) => {
					this.plugin.settings.width = parseInt(value) || 800;
					await this.plugin.saveSettings();
				}));

		new Setting(containerEl)
			.setName('表情符号')
			.setDesc('设置顶部显示的表情符号')
			.addText(text => text
				.setPlaceholder('输入表情符号')
				.setValue(this.plugin.settings.emoji)
				.onChange(async (value) => {
					this.plugin.settings.emoji = value;
					await this.plugin.saveSettings();
				}));

		new Setting(containerEl)
			.setName('水印文本')
			.setDesc('设置图片底部的水印文本')
			.addText(text => text
				.setPlaceholder('输入水印文本')
				.setValue(this.plugin.settings.watermark)
				.onChange(async (value) => {
					this.plugin.settings.watermark = value;
					await this.plugin.saveSettings();
				}));
	}
} 