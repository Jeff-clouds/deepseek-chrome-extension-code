import { App, Editor, MarkdownView, Modal, Notice, Plugin, PluginSettingTab, Setting, Menu } from 'obsidian';
import html2canvas from 'html2canvas';
import hljs from 'highlight.js';
import './styles.css';
import { MarkdownRenderer } from 'obsidian';

interface MarkdownImageGeneratorSettings {
	width: number;
	emoji: string;
	watermark: string;
}

const DEFAULT_SETTINGS: MarkdownImageGeneratorSettings = {
	width: 800,
	emoji: '✨',
	watermark: 'Generated by Markdown Image Generator'
}

export default class MarkdownImageGenerator extends Plugin {
	settings: MarkdownImageGeneratorSettings;

	async onload() {
		await this.loadSettings();

		// 添加命令
		this.addCommand({
			id: 'generate-markdown-image',
			name: '生成 Markdown 图片',
			editorCheckCallback: (checking: boolean, editor: Editor, view: MarkdownView) => {
				// 确保在 Markdown 视图中可用
				if (view instanceof MarkdownView) {
					if (!checking) {
						new ImageGeneratorModal(this.app, this, editor).open();
					}
					return true;
				}
				return false;
			}
		});

		// 添加编辑器右键菜单
		this.registerEvent(
			this.app.workspace.on('editor-menu', (menu: Menu, editor: Editor, view: MarkdownView) => {
				menu.addItem((item) => {
					item
						.setTitle('生成 Markdown 图片')
						.setIcon('image')
						.onClick(() => {
							new ImageGeneratorModal(this.app, this, editor).open();
						});
				});
			})
		);

		// 添加设置标签页
		this.addSettingTab(new MarkdownImageGeneratorSettingTab(this.app, this));
	}

	onunload() {
		console.log('插件已卸载');
	}

	async loadSettings() {
		this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
	}

	async saveSettings() {
		await this.saveData(this.settings);
	}
}

class ImageGeneratorModal extends Modal {
	plugin: MarkdownImageGenerator;
	editor: Editor;
	private isDragging: boolean = false;
	private startX: number = 0;
	private startY: number = 0;
	private translateX: number = 0;
	private translateY: number = 0;
	private scale: number = 1;

	constructor(app: App, plugin: MarkdownImageGenerator, editor: Editor) {
		super(app);
		this.plugin = plugin;
		this.editor = editor;
	}

	onOpen() {
		const {contentEl} = this;
		contentEl.empty();

		// 设置模态框样式
		contentEl.style.width = '800px';
		contentEl.style.height = '600px';
		contentEl.style.padding = '20px';
		contentEl.style.position = 'relative';
		contentEl.style.overflow = 'hidden';

		// 创建预览容器
		const previewContainer = contentEl.createDiv('markdown-image-preview');
		previewContainer.style.width = `${this.plugin.settings.width}px`;
		previewContainer.style.backgroundColor = 'white';
		previewContainer.style.padding = '20px';
		previewContainer.style.borderRadius = '8px';
		previewContainer.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.1)';
		previewContainer.style.transform = `translate(${this.translateX}px, ${this.translateY}px) scale(${this.scale})`;
		previewContainer.style.transformOrigin = 'center center';
		previewContainer.style.transition = 'transform 0.1s ease-out';
		previewContainer.style.cursor = 'move';

		// 添加宽度显示
		const widthInfo = contentEl.createDiv('width-info');
		widthInfo.style.marginBottom = '10px';
		widthInfo.style.textAlign = 'center';
		widthInfo.setText(`当前宽度: ${this.plugin.settings.width}px`);

		// 添加表情符号
		const emojiEl = previewContainer.createDiv('emoji');
		emojiEl.setText(this.plugin.settings.emoji);

		// 使用 Obsidian 的 markdown 渲染器
		const markdownContent = this.editor.getSelection() || this.editor.getValue();
		const contentDiv = previewContainer.createDiv('content');
		MarkdownRenderer.renderMarkdown(markdownContent, contentDiv, '', this.plugin);

		// 添加水印
		const watermarkEl = previewContainer.createDiv('watermark');
		watermarkEl.setText(this.plugin.settings.watermark);

		// 添加鼠标事件监听
		previewContainer.addEventListener('mousedown', (e) => {
			this.isDragging = true;
			this.startX = e.clientX - this.translateX;
			this.startY = e.clientY - this.translateY;
			previewContainer.style.transition = 'none';
		});

		document.addEventListener('mousemove', (e) => {
			if (!this.isDragging) return;
			this.translateX = e.clientX - this.startX;
			this.translateY = e.clientY - this.startY;
			previewContainer.style.transform = `translate(${this.translateX}px, ${this.translateY}px) scale(${this.scale})`;
		});

		document.addEventListener('mouseup', () => {
			this.isDragging = false;
			previewContainer.style.transition = 'transform 0.1s ease-out';
		});

		// 添加滚轮缩放
		previewContainer.addEventListener('wheel', (e) => {
			e.preventDefault();
			const delta = e.deltaY > 0 ? 0.9 : 1.1;
			this.scale = Math.max(0.1, Math.min(3, this.scale * delta));
			previewContainer.style.transform = `translate(${this.translateX}px, ${this.translateY}px) scale(${this.scale})`;
		});

		// 添加双击重置
		previewContainer.addEventListener('dblclick', () => {
			this.translateX = 0;
			this.translateY = 0;
			this.scale = 1;
			previewContainer.style.transform = `translate(0px, 0px) scale(1)`;
		});

		// 添加生成按钮
		const buttonContainer = contentEl.createDiv('button-container');
		buttonContainer.style.position = 'absolute';
		buttonContainer.style.bottom = '20px';
		buttonContainer.style.left = '50%';
		buttonContainer.style.transform = 'translateX(-50%)';
		buttonContainer.style.zIndex = '1000';
		
		const generateButton = buttonContainer.createEl('button', { text: '生成图片' });
		generateButton.style.padding = '8px 16px';
		generateButton.style.borderRadius = '4px';
		generateButton.style.border = 'none';
		generateButton.style.backgroundColor = 'var(--interactive-accent)';
		generateButton.style.color = 'white';
		generateButton.style.cursor = 'pointer';
		
		generateButton.addEventListener('click', async () => {
			try {
				const canvas = await html2canvas(previewContainer);
				const image = canvas.toDataURL('image/png');
				
				// 创建下载链接
				const link = document.createElement('a');
				link.download = 'markdown-image.png';
				link.href = image;
				link.click();

				new Notice('图片已生成！');
			} catch (error) {
				new Notice('生成图片时出错：' + error.message);
			}
		});
	}

	onClose() {
		const {contentEl} = this;
		contentEl.empty();
		// 重置状态
		this.isDragging = false;
		this.translateX = 0;
		this.translateY = 0;
		this.scale = 1;
	}
}

class MarkdownImageGeneratorSettingTab extends PluginSettingTab {
	plugin: MarkdownImageGenerator;

	constructor(app: App, plugin: MarkdownImageGenerator) {
		super(app, plugin);
		this.plugin = plugin;
	}

	display(): void {
		const {containerEl} = this;
		containerEl.empty();

		containerEl.createEl('h2', {text: 'Markdown 图片生成器设置'});

		new Setting(containerEl)
			.setName('图片宽度')
			.setDesc('设置生成图片的宽度（像素），建议范围：400-2000')
			.addText(text => text
				.setPlaceholder('输入宽度')
				.setValue(this.plugin.settings.width.toString())
				.onChange(async (value) => {
					// 验证输入值
					const numValue = parseInt(value);
					if (isNaN(numValue)) {
						text.setValue('800');
						this.plugin.settings.width = 800;
					} else if (numValue < 400) {
						text.setValue('400');
						this.plugin.settings.width = 400;
					} else if (numValue > 2000) {
						text.setValue('2000');
						this.plugin.settings.width = 2000;
					} else {
						this.plugin.settings.width = numValue;
					}
					await this.plugin.saveSettings();
				}));

		new Setting(containerEl)
			.setName('表情符号')
			.setDesc('设置顶部显示的表情符号')
			.addText(text => text
				.setPlaceholder('输入表情符号')
				.setValue(this.plugin.settings.emoji)
				.onChange(async (value) => {
					this.plugin.settings.emoji = value;
					await this.plugin.saveSettings();
				}));

		new Setting(containerEl)
			.setName('水印文本')
			.setDesc('设置图片底部的水印文本')
			.addText(text => text
				.setPlaceholder('输入水印文本')
				.setValue(this.plugin.settings.watermark)
				.onChange(async (value) => {
					this.plugin.settings.watermark = value;
					await this.plugin.saveSettings();
				}));
	}
} 